# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+TITLE: Dynamic Load Balancing and Scalability Analysis of the Mandelbrot Set in a Multi-Threaded HPC Application
#+LATEX: \makeatletter \def\beamer@shorttitle{Analysis of the Mandelbrot Set in an HPC Application} \makeatother
#+SUBTITLE: SSCAD-WIC 2025
#+AUTHOR: Francisco Etcheverria, Rayan Raddatz, Kenichi Brumati, Lucas Mello Schnorr
#+DATE: 28/10/2025

#+LATEX_CLASS: beamer
#+LATEX_HEADER: \makeatletter
#+LATEX_HEADER: \def\input@path{{theme/}}
#+LATEX_HEADER: \makeatother
#+BEAMER_THEME:Inf
#+LATEX_CLASS_OPTIONS: [xcolor=dvipsnames,10pt]
#+OPTIONS: H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t

#+LATEX_HEADER: \graphicspath{{theme/}{../figures/}{figures/}}

* Introdução

** Roteiro

#+LATEX: \tableofcontents

** Conjunto de Mandelbrot

O conjunto de Mandelbrot \cite{mandelbrot1980} é um conjunto definido pelos pontos complexos \( c \) para os quais a sequência

\[
z_{n+1} = z_n^2 + c, \quad z_0 = 0
\]

permanece limitada, ou seja, não diverge para o infinito após um número finito de iterações.

** Visualização do conjunto

Para visualizar o conjunto, cada pixel de uma imagem é associado a um ponto do plano complexo. 
Cores são atribuídas de acordo com o número de iterações até a sequência divergir.

#+LATEX: \vfill\pause

#+LATEX: \begin{columns}
#+LATEX: \column{0.49\textwidth}
#+LATEX: \includegraphics[width=\linewidth]{figures/frac1.png}
#+LATEX: \column{0.49\textwidth}
#+LATEX: \includegraphics[width=\linewidth]{figures/frac2.png}
#+LATEX: \end{columns}

#+LATEX: \vfill

As imagens resultantes tem uma estrutura fractal, com detalhe infinito sendo encontrado ao ampliar a imagem.

** Aspectos computacionais

- O conjunto de Mandelbrot é *trivialmente paralelizável*: Cada pixel pode ser computado independentemente, sem dependências.

- No entanto, diferentes regiões da imagem requerem números de iterações diferentes. Logo, o *balanceamento de carga* é importante para se obter performance máxima.

** Trabalhos Relacionados

O *balanceamento de carga* é amplamente estudado em sistemas paralelos e de alto desempenho, 
e o conjunto de Mandelbrot é frequentemente utilizado neste contexto.

- *\cite{gomez2020mpi}* compara abordagens utilizando MPI e OpenMP no cálculo do conjunto, assim como abordagens de distribuição de trabalho estáticas e dinâmicas.
- *\cite{mohammed2020two}* propõem uma abordagem de balanceamento dinâmico em dois níveis com MPI e OpenMP, e utiliza o Conjunto de Mandelbrot como um /benchmark/.

#+LATEX: \pause\vfill

Nosso trabalho utiliza uma arquitetura cliente-servidor que aloca o trabalho dinamicamente. 
Realizamos um conjunto de experimentos para avaliar sua eficiência e escalabilidade, e investigar como o 
balanceamento de carga se comporta em diferentes cenários. A seguir, descrevemos a estrutura do sistema.

* Materiais e Métodos

** Arquitetura do sistema: Overview

#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.65\textwidth :center
[[../figures/system_architecture.pdf]]
#+END_CENTER

#+LATEX: \vfill

- *Cliente*: Recebe input do usuário, solicita ao servidor o cálculo de regiões do fractal, recebe as respostas e renderiza o fractal na tela.
- *Servidor*: Composto por um coordenador e vários /workers/ MPI. O coordenador recebe pedidos do cliente, divide-os em tarefas menores e distribui a carga de trabalho entre os /workers/. 

** Arquitetura do sistema: /payloads/ e /responses/

#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.65\textwidth :center
[[../figures/system_architecture.pdf]]
#+END_CENTER

#+LATEX: \vfill

- A interação ocorre através da troca de /payloads/ e /responses/. O cliente envia um payload, e recebe vários /responses/ do servidor.
- */Payloads/* contêm os limites da região, dimensões da tela e a granularidade - o tamanho dos blocos em que o trabalho é dividido.
- */Responses/* contêm os valores calculados pelo servidor, junto com o payload de origem e o identificador do worker que os produziu.

** Arquitetura do sistema: Fluxo de comunicação

#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.65\textwidth :center
[[../figures/system_architecture.pdf]]
#+END_CENTER

#+LATEX: \vfill

- O cliente e o servidor são /multi-threaded/, com cada etapa de comunicação em uma /thread/ dedicada.
- O coordenador recebe um /payload/, divide em múltiplos /payloads/ menores e os distribui dinamicamente aos *workers* MPI.
- Os /workers/ pedem trabalho para o coordenador, e enviam suas respostas assim que são calculadas.
- Cada /response/ é redirecionado ao cliente após ser recebido de um /worker/, permitindo visualização progressiva da imagem. 

** Configuração de hardware

Os experimentos foram executados no Parque Computacional de Alto Desempenho (PCAD) do Instituto de Informática da UFRGS.

#+LATEX: \vfill

O cliente rodou em uma máquina *draco*, com:

- 2x Intel Xeon E5-2640 v2 @ 2.00GHz, 32 cores
- 64GB DDR4

O servidor rodou em até seis máquinas *cei*, cada um com:

- 2x Intel Xeon Silver 4116 @ 2.10GHz, 24 cores por nó
- 96GB DDR4

** Projeto Experimental

* Resultados

** Métricas

** Resultados 1

** Resultados 2

** Resultados 3

* Conclusão

** Considerações finais

** Trabalhos futuros

** Referências

#+LATEX: \bibliographystyle{sbc}
#+LATEX: \bibliography{refs} 

* Bib file                                                         :noexport:
#+begin_src bibtex :tangle refs.bib

@article{gomez2020mpi,
  title={MPI vs OpenMP: A case study on parallel generation of Mandelbrot set},
  author={G{\'o}mez, Ernesto Soto},
  journal={Innovation and Software},
  volume={1},
  number={2},
  pages={12--26},
  year={2020}
}

@inproceedings{mohammed2020two,
  title={Two-level dynamic load balancing for high performance scientific applications},
  author={Mohammed, Ali and Cavelan, Aur{\'e}lien and Ciorba, Florina M and Cabez{\'o}n, Rub{\'e}n M and Banicescu, Ioana},
  booktitle={SIAM Conference on Parallel Processing for Scientific Computing},
  year={2020},
}

@article{mandelbrot1980,
  author = {Mandelbrot, Benoit B.},
  title = { “Fractal Aspects of the Iteration of Z → z $\Lambda$(1-Z) for Complex $\Lambda$ and Z”},
  journal = {Annals of the New York Academy of Sciences},
  volume = {357},
  number = {1},
  pages = {249-259},
  year = {1980}
}
#+end_src
