/*
This file is part of "Fractal @ PCAD".

"Fractal @ PCAD" is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

"Fractal @ PCAD" is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with "Fractal @ PCAD". If not, see
<https://www.gnu.org/licenses/>.
*/
#ifndef __COLORS_H
#define __COLORS_H

#include <math.h>
#include <raylib.h>

// Definition for a normalizing function. Currently, these normalize values into a [0, 1] range.
// The color values will then be fed into coloring functions.
typedef double (*normalize_fn)(int depth, int max_depth);

// Definition for a coloring function. Currently, these take normalized values and map them to a color.
typedef Color (*color_fn)(double t);

#define TOTAL_COLORS 9

#define VIRIDIS_SIZE 227

static const Color viridis_palette[VIRIDIS_SIZE] = {
  {68, 1, 84, 255}, {68, 2, 86, 255}, {69, 4, 87, 255}, {69, 5, 89, 255}, {70, 7, 90, 255},
  {70, 8, 92, 255}, {70, 10, 93, 255}, {70, 11, 94, 255}, {71, 13, 96, 255}, {71, 14, 97, 255},
  {71, 16, 98, 255}, {71, 17, 99, 255}, {72, 19, 101, 255}, {72, 20, 102, 255}, {72, 22, 103, 255},
  {72, 23, 104, 255}, {72, 24, 105, 255}, {72, 26, 106, 255}, {72, 27, 108, 255}, {72, 28, 109, 255},
  {72, 30, 110, 255}, {72, 31, 111, 255}, {72, 33, 112, 255}, {71, 34, 113, 255}, {71, 35, 114, 255},
  {71, 37, 115, 255}, {71, 38, 116, 255}, {70, 39, 117, 255}, {70, 41, 118, 255}, {70, 42, 119, 255},
  {69, 43, 120, 255}, {69, 45, 121, 255}, {68, 46, 122, 255}, {68, 47, 122, 255}, {67, 49, 123, 255},
  {67, 50, 124, 255}, {66, 51, 125, 255}, {66, 52, 126, 255}, {65, 54, 126, 255}, {65, 55, 127, 255},
  {64, 56, 128, 255}, {63, 58, 129, 255}, {63, 59, 129, 255}, {62, 60, 130, 255}, {62, 61, 131, 255},
  {61, 63, 131, 255}, {60, 64, 132, 255}, {60, 65, 133, 255}, {59, 66, 133, 255}, {58, 68, 134, 255},
  {58, 69, 134, 255}, {57, 70, 135, 255}, {56, 71, 136, 255}, {56, 73, 136, 255}, {55, 74, 137, 255},
  {54, 75, 137, 255}, {54, 76, 138, 255}, {53, 78, 138, 255}, {52, 79, 139, 255}, {52, 80, 139, 255},
  {51, 81, 140, 255}, {50, 83, 140, 255}, {50, 84, 141, 255}, {49, 85, 141, 255}, {49, 86, 142, 255},
  {48, 88, 142, 255}, {47, 89, 142, 255}, {47, 90, 143, 255}, {46, 91, 143, 255}, {46, 93, 144, 255},
  {45, 94, 144, 255}, {45, 95, 144, 255}, {44, 96, 145, 255}, {44, 97, 145, 255}, {43, 99, 145, 255},
  {43, 100, 146, 255}, {42, 101, 146, 255}, {42, 102, 146, 255}, {41, 104, 146, 255}, {41, 105, 147, 255},
  {40, 106, 147, 255}, {40, 107, 147, 255}, {39, 108, 148, 255}, {39, 110, 148, 255}, {38, 111, 148, 255},
  {38, 112, 148, 255}, {37, 113, 149, 255}, {37, 114, 149, 255}, {36, 116, 149, 255}, {36, 117, 149, 255},
  {35, 118, 149, 255}, {35, 119, 150, 255}, {35, 120, 150, 255}, {34, 121, 150, 255}, {34, 123, 150, 255},
  {33, 124, 150, 255}, {33, 125, 150, 255}, {33, 126, 150, 255}, {32, 127, 150, 255}, {32, 128, 150, 255},
  {32, 130, 151, 255}, {31, 131, 151, 255}, {31, 132, 151, 255}, {31, 133, 151, 255}, {31, 134, 151, 255},
  {30, 135, 151, 255}, {30, 136, 151, 255}, {30, 137, 151, 255}, {30, 139, 151, 255}, {30, 140, 151, 255},
  {30, 141, 151, 255}, {30, 142, 151, 255}, {30, 143, 151, 255}, {30, 144, 151, 255}, {30, 145, 151, 255},
  {30, 146, 151, 255}, {30, 147, 151, 255}, {30, 148, 151, 255}, {30, 149, 151, 255}, {31, 150, 151, 255},
  {31, 151, 151, 255}, {31, 152, 151, 255}, {32, 153, 151, 255}, {32, 154, 151, 255}, {33, 155, 151, 255},
  {33, 156, 151, 255}, {34, 157, 151, 255}, {34, 158, 151, 255}, {35, 159, 151, 255}, {36, 160, 151, 255},
  {36, 161, 151, 255}, {37, 162, 151, 255}, {38, 163, 151, 255}, {38, 164, 151, 255}, {39, 165, 151, 255},
  {40, 166, 151, 255}, {41, 167, 151, 255}, {42, 168, 151, 255}, {43, 169, 151, 255}, {44, 170, 151, 255},
  {45, 171, 151, 255}, {46, 172, 151, 255}, {47, 173, 151, 255}, {48, 174, 151, 255}, {49, 175, 150, 255},
  {50, 176, 150, 255}, {52, 177, 150, 255}, {53, 178, 150, 255}, {54, 179, 150, 255}, {55, 180, 150, 255},
  {57, 181, 149, 255}, {58, 182, 149, 255}, {59, 183, 149, 255}, {61, 183, 148, 255}, {62, 184, 148, 255},
  {64, 185, 148, 255}, {65, 186, 147, 255}, {66, 187, 147, 255}, {68, 188, 147, 255}, {69, 189, 146, 255},
  {71, 190, 146, 255}, {72, 191, 145, 255}, {74, 192, 145, 255}, {75, 193, 144, 255}, {77, 194, 144, 255},
  {78, 195, 143, 255}, {80, 196, 143, 255}, {82, 197, 142, 255}, {83, 198, 142, 255}, {85, 199, 141, 255},
  {86, 199, 141, 255}, {88, 200, 140, 255}, {90, 201, 139, 255}, {91, 202, 139, 255}, {93, 203, 138, 255},
  {95, 204, 137, 255}, {96, 205, 137, 255}, {98, 206, 136, 255}, {100, 207, 135, 255}, {102, 208, 135, 255},
  {103, 209, 134, 255}, {105, 210, 133, 255}, {107, 211, 132, 255}, {109, 212, 132, 255}, {111, 213, 131, 255},
  {113, 214, 130, 255}, {115, 215, 129, 255}, {117, 216, 128, 255}, {119, 217, 127, 255}, {121, 218, 127, 255},
  {123, 219, 126, 255}, {125, 220, 125, 255}, {127, 221, 124, 255}, {129, 222, 123, 255}, {132, 223, 122, 255},
  {134, 224, 121, 255}, {136, 225, 120, 255}, {138, 226, 119, 255}, {141, 227, 118, 255}, {143, 228, 117, 255},
  {145, 229, 116, 255}, {148, 230, 115, 255}, {150, 231, 114, 255}, {153, 232, 113, 255}, {155, 233, 111, 255},
  {158, 234, 110, 255}, {160, 235, 109, 255}, {163, 236, 108, 255}, {165, 237, 107, 255}, {168, 238, 106, 255},
  {171, 239, 105, 255}, {173, 240, 104, 255}, {176, 241, 103, 255}, {179, 242, 101, 255}, {181, 243, 100, 255},
  {184, 244, 99, 255}, {187, 245, 98, 255}, {190, 246, 97, 255}, {192, 247, 96, 255}, {195, 248, 94, 255},
  {198, 249, 93, 255}, {201, 250, 92, 255}, {204, 251, 91, 255}, {207, 252, 89, 255}, {210, 253, 88, 255},
  {213, 254, 87, 255}, {216, 255, 86, 255}
};

Color get_current_pallette_color(int current_color, int depth, int max_depth);

#endif
